zabbix_export:
  version: '7.4'
  template_groups:
    - uuid: a571c0d144b14fd4a87a9d9b2aa9fcd6
      name: Templates/Applications
  templates:
    - uuid: 5630ec1b1baf449abe1bc5521f85fe6c
      template: 'Website certificate by Zabbix agent 2'
      name: 'Website certificate by Zabbix agent 2'
      description: |
        The template to monitor TLS/SSL certificate on the website by Zabbix agent 2 that works without any external scripts.
        
        Zabbix agent 2 with the WebCertificate plugin requests certificate using the web.certificate.get key and returns JSON with certificate attributes.
        
        You can discuss this template or leave feedback on our forum https://www.zabbix.com/forum/zabbix-suggestions-and-feedback/428309-discussion-thread-for-official-zabbix-template-tls-ssl-certificates-monitoring
        
        Generated by official Zabbix template tool "Templator"
      vendor:
        name: Zabbix
        version: 7.4-1
      groups:
        - name: Templates/Applications
      items:
        - uuid: 843c78d532c24da7bc02a065783472c6
          name: 'Get data'
          type: SCRIPT
          key: cert.get.data
          history: 1h
          value_type: TEXT
          params: |
            var Cert = {
            	params: {},
            
            	checkParams: function (params) {
            		if (typeof params !== 'object') {
            			throw 'Error of parameter processing.'
            		}
            
            		['hostnames'].forEach(function (field) {
            			if (typeof params[field] === 'undefined' || params[field] === '') {
            				throw 'Required params is not set:' + field + '.';
            			}
            		});
            
            		['port', 'ip', 'check'].forEach(function (field) {
            			if (typeof params[field] === 'undefined') {
            				params[field] = '';
            			}
            		});
            
            		Cert.params = params;
            	},
            
            	parseParams: function () {
            		var array_hostname = Cert.params['hostnames'].split(','),
            			array_port = Cert.params['port'].split(','),
            			array_ip = Cert.params['ip'].split(','),
            			data = [],
            			errors = [];
            
            		for (var i = 0; i < Math.max(array_hostname.length, array_port.length, array_ip.length); i++) {
            			if (typeof array_hostname[i] === 'undefined' || array_hostname[i].trim() === '') {
            				if (Cert.params['check'] === 'STRICT') {
            					throw 'Invalid parameter "{' + '$CERT.WEBSITE.HOSTNAME} [' + i + ']" : host is required.'
            				} else {
            					errors.push(i);
            					continue;
            				}
            			}
            
            			item_name = array_hostname[i].trim();
            			ip = typeof array_ip[i] === 'undefined' ? '' : array_ip[i].trim();
            			port = typeof array_port[i] === 'undefined' ? '' : array_port[i].trim();
            
            			is_empty_ip = ip === '';
            			is_empty_port = port === '' || port === '443';
            
            			if (!is_empty_port) {
            
            				if (!/^\d+$/.test(port)) {
            					throw 'Invalid parameter "{' + '$CERT.WEBSITE.PORT} [' + i + ']" : error parse value "' + port + '".';
            				}
            
            				port_number = parseInt(port);
            
            				if (port_number < 1 || port_number > 65535) {
            					throw 'Invalid parameter "{' + '$CERT.WEBSITE.PORT} [' + i + ']" : "' + port_number + '" is out of range 1-65535.';
            				}
            			}
            
            			if (!is_empty_ip && is_empty_port) {
            				item_name += ', ' + ip;
            			} else if (is_empty_ip && !is_empty_port) {
            				item_name += ':' + port;
            			} else if (!is_empty_ip && !is_empty_port) {
            				item_name += ', ' + ip + ':' + port;
            			}
            
            			data.push(
            				{
            					hostname: array_hostname[i].trim(),
            					port: port,
            					ip: ip,
            					key: item_name
            				}
            			);
            		}
            
            		return {
            			data: data,
            			errors: errors
            		};
            	}
            };
            
            var lld_data = {
            	error: {
            		message: '',
            		code: 0
            	},
            	data: []
            };
            
            try {
            	Cert.checkParams(JSON.parse(value));
            	var parse_result = Cert.parseParams();
            	if (parse_result['errors'].length > 0) {
            		lld_data.error.message = 'Incorrect parameters: [' + parse_result['errors'].toString() + '].';
            		lld_data.error.code = 1;
            	}
            	lld_data.data = parse_result['data']
            }
            catch (error) {
            	error += (String(error).endsWith('.')) ? '' : '.';
            	lld_data.error.message = error;
            	lld_data.error.code = 2;
            }
            
            return JSON.stringify(lld_data);
          description: 'Parses the parameters from user macros and returns a JSON string used in LLD.'
          preprocessing:
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1h
          parameters:
            - name: check
              value: '{$CERT.PARAMS.CHECK}'
            - name: hostnames
              value: '{$CERT.WEBSITE.HOSTNAME}'
            - name: ip
              value: '{$CERT.WEBSITE.IP}'
            - name: port
              value: '{$CERT.WEBSITE.PORT}'
          tags:
            - tag: component
              value: raw
          triggers:
            - uuid: 2c1234bcde69488c946fd447bc93243d
              expression: 'jsonpath(last(/Website certificate by Zabbix agent 2/cert.get.data),"$.error.code", 0) = 1'
              name: 'Certificate: Error parse parameters'
              event_name: 'Certificate: {?jsonpath(last(//cert.get.data),"$.error.message", "")}'
              priority: WARNING
              description: 'Some entries in the macro `{$CERT.WEBSITE.HOSTNAME}` are incorrect and ignored.'
              manual_close: 'YES'
              tags:
                - tag: scope
                  value: notice
            - uuid: 0fb7cf52cf5d42ce9c1fbe7646ee92db
              expression: 'jsonpath(last(/Website certificate by Zabbix agent 2/cert.get.data),"$.error.code", 0) = 2'
              name: 'Certificate: Error parse parameters'
              event_name: 'Certificate: {?jsonpath(last(//cert.get.data),"$.error.message", "")}'
              priority: HIGH
              description: |
                Some entries in the macro `{$CERT.WEBSITE.HOSTNAME}` are incorrect.
                Please edit the macros to avoid data loss.
              manual_close: 'YES'
              tags:
                - tag: scope
                  value: notice
      discovery_rules:
        - uuid: 31ef613f421e413fb1dc34140057ce22
          name: 'Website discovery'
          type: DEPENDENT
          key: cert.website.discovery
          item_prototypes:
            - uuid: 3a313528c7244ff39fbc1dadbba3b11a
              name: '[{#CERT.WEBSITE.ITEMNAME}]: Subject alternative name'
              type: DEPENDENT
              key: 'cert.alternative_names[{#CERT.WEBSITE.ITEMNAME}]'
              value_type: TEXT
              description: 'The subject alternative name extension allows identities to be bound to the subject of the certificate. These identities may be included in addition to or in place of the identity in the subject field of the certificate. Defined options include an e-mail address, a DNS name, an IP address, and a Uniform Resource Identifier (URI).'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.x509.alternative_names
              master_item:
                key: 'web.certificate.get[{#CERT.WEBSITE.HOSTNAME},{#CERT.WEBSITE.PORT},{#CERT.WEBSITE.IP}]'
              tags:
                - tag: component
                  value: cert
            - uuid: 8dc68f87dd3b49bbb78e19d880188b63
              name: '[{#CERT.WEBSITE.ITEMNAME}]: Issuer'
              type: DEPENDENT
              key: 'cert.issuer[{#CERT.WEBSITE.ITEMNAME}]'
              value_type: TEXT
              description: 'The field identifies the entity that signed and issued the certificate.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.x509.issuer
              master_item:
                key: 'web.certificate.get[{#CERT.WEBSITE.HOSTNAME},{#CERT.WEBSITE.PORT},{#CERT.WEBSITE.IP}]'
              tags:
                - tag: component
                  value: cert
            - uuid: 3c0fe82cc4634b77ba24ae63655017ae
              name: '[{#CERT.WEBSITE.ITEMNAME}]: Last validation status'
              type: DEPENDENT
              key: 'cert.message[{#CERT.WEBSITE.ITEMNAME}]'
              value_type: TEXT
              description: 'Message from the latest certificate check.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.result.message
              master_item:
                key: 'web.certificate.get[{#CERT.WEBSITE.HOSTNAME},{#CERT.WEBSITE.PORT},{#CERT.WEBSITE.IP}]'
              tags:
                - tag: component
                  value: cert
            - uuid: a58e5e27236e47a28c2ff845fec18fa4
              name: '[{#CERT.WEBSITE.ITEMNAME}]: Expires on'
              type: DEPENDENT
              key: 'cert.not_after[{#CERT.WEBSITE.ITEMNAME}]'
              units: unixtime
              description: 'The date on which the certificate validity period ends.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.x509.not_after.timestamp
              master_item:
                key: 'web.certificate.get[{#CERT.WEBSITE.HOSTNAME},{#CERT.WEBSITE.PORT},{#CERT.WEBSITE.IP}]'
              tags:
                - tag: component
                  value: cert
              trigger_prototypes:
                - uuid: 0a3c0fb048a1453c94e11fd1dcc60ae1
                  expression: '(last(/Website certificate by Zabbix agent 2/cert.not_after[{#CERT.WEBSITE.ITEMNAME}]) - now()) / 86400 < {$CERT.EXPIRY.WARN}'
                  name: 'Cert [{#CERT.WEBSITE.ITEMNAME}]: SSL certificate expires soon'
                  event_name: 'Cert [{#CERT.WEBSITE.ITEMNAME}]: SSL certificate expires soon (less than {$CERT.EXPIRY.WARN} days)'
                  priority: WARNING
                  description: 'The SSL certificate should be updated or it will become untrusted.'
                  dependencies:
                    - name: 'Cert [{#CERT.WEBSITE.ITEMNAME}]: SSL certificate is invalid'
                      expression: 'find(/Website certificate by Zabbix agent 2/cert.validation[{#CERT.WEBSITE.ITEMNAME}],,"like","invalid")=1'
                  tags:
                    - tag: scope
                      value: notice
            - uuid: 9eb889f2a9bc49329156892f6ccbbe74
              name: '[{#CERT.WEBSITE.ITEMNAME}]: Valid from'
              type: DEPENDENT
              key: 'cert.not_before[{#CERT.WEBSITE.ITEMNAME}]'
              units: unixtime
              description: 'The date on which the certificate validity period begins.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.x509.not_before.timestamp
              master_item:
                key: 'web.certificate.get[{#CERT.WEBSITE.HOSTNAME},{#CERT.WEBSITE.PORT},{#CERT.WEBSITE.IP}]'
              tags:
                - tag: component
                  value: cert
            - uuid: 986ee492730748c58c817b9f247ad108
              name: '[{#CERT.WEBSITE.ITEMNAME}]: Public key algorithm'
              type: DEPENDENT
              key: 'cert.public_key_algorithm[{#CERT.WEBSITE.ITEMNAME}]'
              value_type: CHAR
              description: 'The digital signature algorithm used to verify the signature of a certificate.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.x509.public_key_algorithm
              master_item:
                key: 'web.certificate.get[{#CERT.WEBSITE.HOSTNAME},{#CERT.WEBSITE.PORT},{#CERT.WEBSITE.IP}]'
              tags:
                - tag: component
                  value: cert
            - uuid: 120bb5cb550b40bebc539030a701d311
              name: '[{#CERT.WEBSITE.ITEMNAME}]: Serial number'
              type: DEPENDENT
              key: 'cert.serial_number[{#CERT.WEBSITE.ITEMNAME}]'
              value_type: CHAR
              description: 'The serial number is a positive integer assigned by the CA to each certificate. It is unique for each certificate issued by a given CA. Non-conforming CAs may issue certificates with serial numbers that are negative or zero.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.x509.serial_number
              master_item:
                key: 'web.certificate.get[{#CERT.WEBSITE.HOSTNAME},{#CERT.WEBSITE.PORT},{#CERT.WEBSITE.IP}]'
              tags:
                - tag: component
                  value: cert
            - uuid: 20dd431e9d354b7aa1504708a52ccd16
              name: '[{#CERT.WEBSITE.ITEMNAME}]: Fingerprint'
              type: DEPENDENT
              key: 'cert.sha1_fingerprint[{#CERT.WEBSITE.ITEMNAME}]'
              value_type: CHAR
              description: 'The certificate signature (SHA1 fingerprint or thumbprint) is the hash of the entire certificate in DER form.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.sha1_fingerprint
              master_item:
                key: 'web.certificate.get[{#CERT.WEBSITE.HOSTNAME},{#CERT.WEBSITE.PORT},{#CERT.WEBSITE.IP}]'
              tags:
                - tag: component
                  value: cert
              trigger_prototypes:
                - uuid: 3df2ecab879f4c74abd5c84d1a06b2eb
                  expression: 'last(/Website certificate by Zabbix agent 2/cert.sha1_fingerprint[{#CERT.WEBSITE.ITEMNAME}]) <> last(/Website certificate by Zabbix agent 2/cert.sha1_fingerprint[{#CERT.WEBSITE.ITEMNAME}],#2)'
                  name: 'Cert [{#CERT.WEBSITE.ITEMNAME}]: Fingerprint has changed'
                  event_name: 'Cert [{#CERT.WEBSITE.ITEMNAME}]: Fingerprint has changed (new version: {ITEM.VALUE})'
                  priority: INFO
                  description: |
                    The SSL certificate fingerprint has changed. If you did not update the certificate, it may mean your certificate has been hacked. Acknowledge to close the problem manually.
                    There could be multiple valid certificates on some installations. In this case, the trigger will have a false positive. You can ignore it or disable the trigger.
                  manual_close: 'YES'
                  tags:
                    - tag: scope
                      value: notice
            - uuid: 35dbcc82f1e44810a698bf84e6db6cab
              name: '[{#CERT.WEBSITE.ITEMNAME}]: Signature algorithm'
              type: DEPENDENT
              key: 'cert.signature_algorithm[{#CERT.WEBSITE.ITEMNAME}]'
              value_type: CHAR
              description: 'The algorithm identifier for the algorithm used by the CA to sign the certificate.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.x509.signature_algorithm
              master_item:
                key: 'web.certificate.get[{#CERT.WEBSITE.HOSTNAME},{#CERT.WEBSITE.PORT},{#CERT.WEBSITE.IP}]'
              tags:
                - tag: component
                  value: cert
            - uuid: e40756f42a5b4081b86aedc6c30cd3ba
              name: '[{#CERT.WEBSITE.ITEMNAME}]: Subject'
              type: DEPENDENT
              key: 'cert.subject[{#CERT.WEBSITE.ITEMNAME}]'
              value_type: TEXT
              description: 'The field identifies the entity associated with the public key stored in the subject public key field.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.x509.subject
              master_item:
                key: 'web.certificate.get[{#CERT.WEBSITE.HOSTNAME},{#CERT.WEBSITE.PORT},{#CERT.WEBSITE.IP}]'
              tags:
                - tag: component
                  value: cert
            - uuid: 791153e3c13b4750b5b7a8d64d2aa5c4
              name: '[{#CERT.WEBSITE.ITEMNAME}]: Validation result'
              type: DEPENDENT
              key: 'cert.validation[{#CERT.WEBSITE.ITEMNAME}]'
              value_type: CHAR
              description: 'The certificate validation result. Possible values: valid/invalid/valid-but-self-signed'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.result.value
              master_item:
                key: 'web.certificate.get[{#CERT.WEBSITE.HOSTNAME},{#CERT.WEBSITE.PORT},{#CERT.WEBSITE.IP}]'
              tags:
                - tag: component
                  value: cert
              trigger_prototypes:
                - uuid: 1705a328f3644e46899bdeb5fbbd511c
                  expression: 'find(/Website certificate by Zabbix agent 2/cert.validation[{#CERT.WEBSITE.ITEMNAME}],,"like","invalid")=1'
                  name: 'Cert [{#CERT.WEBSITE.ITEMNAME}]: SSL certificate is invalid'
                  priority: HIGH
                  description: 'The SSL certificate has expired or it is issued for another domain.'
                  tags:
                    - tag: scope
                      value: security
            - uuid: c66412ac013d444a986e6d45bc06c9cb
              name: '[{#CERT.WEBSITE.ITEMNAME}]: Version'
              type: DEPENDENT
              key: 'cert.version[{#CERT.WEBSITE.ITEMNAME}]'
              value_type: CHAR
              description: 'The version of the encoded certificate.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.x509.version
              master_item:
                key: 'web.certificate.get[{#CERT.WEBSITE.HOSTNAME},{#CERT.WEBSITE.PORT},{#CERT.WEBSITE.IP}]'
              tags:
                - tag: component
                  value: cert
            - uuid: 5c4e35db1c8449589e2d892250e907c7
              name: '[{#CERT.WEBSITE.ITEMNAME}]: Get'
              key: 'web.certificate.get[{#CERT.WEBSITE.HOSTNAME},{#CERT.WEBSITE.PORT},{#CERT.WEBSITE.IP}]'
              delay: 15m
              history: '0'
              value_type: TEXT
              description: 'Returns a JSON with the attributes of a certificate of the requested site.'
              preprocessing:
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 6h
              tags:
                - tag: component
                  value: raw
          master_item:
            key: cert.get.data
          lld_macro_paths:
            - lld_macro: '{#CERT.WEBSITE.HOSTNAME}'
              path: $.hostname
            - lld_macro: '{#CERT.WEBSITE.IP}'
              path: $.ip
            - lld_macro: '{#CERT.WEBSITE.ITEMNAME}'
              path: $.key
            - lld_macro: '{#CERT.WEBSITE.PORT}'
              path: $.port
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.data
      tags:
        - tag: class
          value: software
        - tag: target
          value: certificate
      macros:
        - macro: '{$CERT.EXPIRY.WARN}'
          value: '7'
          description: 'Number of days until the certificate expires.'
        - macro: '{$CERT.PARAMS.CHECK}'
          value: STRICT
          description: |
            The type of verification of input parameters.
            `STRICT` (default) - when an error occurs, the check stops.
            Any other value - erroneous records are ignored.
        - macro: '{$CERT.WEBSITE.HOSTNAME}'
          value: '<Enter DNS name>'
          description: 'The website''s DNS name used for the connection.'
        - macro: '{$CERT.WEBSITE.IP}'
          description: 'The website''s IP address used for the connection.'
        - macro: '{$CERT.WEBSITE.PORT}'
          value: '443'
          description: 'The TLS/SSL port number of the website.'
